

@inherits LayoutComponentBase
@implements IDisposable
@using System.Reflection
@*@using MatBlazor.Demo.Models*@
@using Microsoft.AspNetCore.Components
@*@inject AppModel AppModel
    @inject UserAppModel UserAppModel*@
@inject IJSRuntime Js
@using Diwaan.Shared
<MatAnchorUtils></MatAnchorUtils>
<MatAppBar Style="z-index: 100; background-color:green" Class="mat">
    <MatAppBarRow>
        <MatAppBarSection>
            <MatIconButton Icon="menu" OnClick="@((e) => MenuButtonClicked())"></MatIconButton>
            <MatHidden BreakPoint="@MatBreakpoint.XS" Direction="@MatHiddenDirection.Down">
                <MatAppBarTitle>Diwaani</MatAppBarTitle>
            </MatHidden>
            <MatHidden BreakPoint="@MatBreakpoint.SM" Direction="@MatHiddenDirection.Up">
                <MatAppBarTitle>MatBlazor</MatAppBarTitle>
            </MatHidden>
        </MatAppBarSection>
        <MatAppBarSection Align="@MatAppBarSectionAlign.End">
            <MatHidden BreakPoint="@MatBreakpoint.XS" Direction="@MatHiddenDirection.Down">
                <MatIconButton @ref="themeButton" Icon="invert_colors" OnClick="@OnClickButton">
                </MatIconButton>
                <MatIconButton Link="http://samprof.com" Target="_blank">
                    <i class="fa fa-user-circle" aria-hidden="true"></i>
                </MatIconButton>
                <MatIconButton Link="https://github.com/SamProf/MatBlazor" Target="_blank">
                    <i class="fa fa-github" aria-hidden="true"></i>
                </MatIconButton>
            </MatHidden>
            <MatHidden BreakPoint="@MatBreakpoint.SM" Direction="@MatHiddenDirection.Up">
                <MatIconButton Icon="more_vert" OnClick="@OpenSmallMenu" @ref="SmallMenuButton"></MatIconButton>
                <MatMenu @ref="SmallMenu" style="z-index: 100;">
                    <MatList>
                        <MatListItem Href="http://samprof.com" target="_blank">
                            Samprof.com
                        </MatListItem>
                        <MatListItem Href="https://github.com/SamProf/MatBlazor" target="_blank">
                            Github
                        </MatListItem>
                        <MatListItem @ref="ThemeListItem" OnClick="@OnClickListItem">
                            Select Theme
                        </MatListItem>
                    </MatList>
                </MatMenu>
            </MatHidden>
            @*<MatMenu @ref="Menu" style="z-index: 100;">
                    <ThemeColorSelector @bind-Value ="" ></ThemeColorSelector>
                </MatMenu>*@
        </MatAppBarSection>
    </MatAppBarRow>
</MatAppBar>

<MatDrawerContainer Style="width: 100vw; height: 100vh;" Class="mat">

    <MatHidden Breakpoint="@MatBreakpoint.SM" Direction="@MatHiddenDirection.Up" HiddenChanged="@ModelDrawerHiddenChanged">
        <ChildContent>
            <MatDrawer @bind-Opened="@_navMenuOpened" Mode="@MatDrawerMode.Modal">
                <MatAppBarAdjust></MatAppBarAdjust>
                <DemoDrawerContent></DemoDrawerContent>
            </MatDrawer>
        </ChildContent>
        <ElseContent>
            <MatDrawer @bind-Opened="@_navMenuOpened" Mode="@MatDrawerMode.Dismissible">
                <MatAppBarAdjust></MatAppBarAdjust>
                <DemoDrawerContent></DemoDrawerContent>
            </MatDrawer>
        </ElseContent>
    </MatHidden>

    <MatDrawerContent Class="mdc-theme--background">
        <MatAppBarAdjust></MatAppBarAdjust>


        <div class="body-wrapper m-5">
            @Body
        </div>
    </MatDrawerContent>

</MatDrawerContainer>


<MatSnackbar @bind-IsOpen="@lazySnackbarIsOpen">
    <MatSnackbarContent>If you like this App, Give it a star on Github.</MatSnackbarContent>
    <MatSnackbarActions>
        @* <MatButton Raised="true">Star</MatButton> *@
        <MatIconButton Icon="@MatIconNames.Stars" Link="https://github.com/BlazorComponents/MatBlazor" style="color: white;" target="_blank"></MatIconButton>
    </MatSnackbarActions>

</MatSnackbar>

<MatPortalHost></MatPortalHost>


@code {

    BaseMatIconButton themeButton;
    BaseMatListItem ThemeListItem;
    BaseMatMenu Menu;


    [CascadingParameter]
    MatTheme theme { get; set; }


    public string ThemePrimary
    {
        get { return theme.Primary; }
        set
        {
            theme.Primary = value;
            theme.ThemeHasChanged();
        }
    }


    protected void ModelDrawerHiddenChanged(bool hidden)
    {
        if (!hidden)
        {
            _navMenuOpened = false;
        }
    }

    public void OnClickButton(MouseEventArgs e)
    {
        _ = this.Menu.OpenAsync(themeButton.Ref);
    }

    public void OnClickListItem(MouseEventArgs e)
    {
        _ = this.Menu.OpenAsync(ThemeListItem.Ref);
    }

    bool lazySnackbarIsOpen = false;

    bool _navMenuOpened = true;

    void MenuButtonClicked()
    {
        _navMenuOpened = !_navMenuOpened;
        this.StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Task.Run(async () =>
        {
            await Task.Delay(TimeSpan.FromSeconds(5));
            this.lazySnackbarIsOpen = true;
            await InvokeAsync(() => { this.StateHasChanged(); });
        });
    }

    private BaseMatIconButton SmallMenuButton;
    private BaseMatMenu SmallMenu;

    public void OpenSmallMenu(MouseEventArgs e)
    {
        _ = this.SmallMenu.OpenAsync(SmallMenuButton.Ref);
    }

    public void Dispose()
    {
    }

}